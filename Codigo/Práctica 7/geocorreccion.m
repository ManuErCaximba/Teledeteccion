%Ejercicio 7.1
function J = geocorreccion(I)
%Obtenemos las coord UTM de los puntos
xUTM = [
    548424.355;...
    631420.574;...
    -9278.314;...
    6072.872;...
    -69508.075;...
    -36202.769;...
    208671.053;...
    290359.432;...
    580418.815;...
    705585.986;...
    786384.148;...
    983953.049;...
    1027305.351];
yUTM = [
    5206584.546;...
    5076573.957;...
    4750070.730;...
    4496030.332;...
    4308601.989;...
    4110908.463;...
    4046139.622;...
    4002518.683;...
    4067007.599;...
    4166233.136;...
    4297143.491;...
    4386515.173;...
    4702589.421];
%Su equivalencia en pixeles de la imagen
fPix = [11; 171; 354; 510; 716; 892; 977; 1045; 1033; 965; 863; 816; 536];
cPix = [1513; 1558; 777; 755; 601; 588; 818;...
    907; 1267; 1429; 1536; 1711; 1777];
%Realizamos la regresion y calculamos los valores de a y b
o = ones(13,1);
a = regress(fPix, [o, xUTM, yUTM]); %f = a0 + a1x + a2y
b = regress(cPix, [o, xUTM, yUTM]); %c = b0 + b1x + b2y

[F,C] = size(I);
J = uint8(zeros(F+600, C));
%Incrementamos las filas para que salga mejor la peninsula
[m,n] = size(J);
y = 5400000;
%Desplazamos los pixeles
for i = 1:m
    x = -750000;
    for j = 1:n
        f = a(1) + a(2) * x + a(3) * y;
        c = b(1) + b(2) * x + b(3) * y;
        x = x + 1000;
        %Comprobamos que la nueva posicion del pixel sea un pixel valido
        if f >= 1 && f <= F && c >= 1 && c <= C
            J(i,j) = I(round(f),round(c));
        end
    end
    y = y - 1000;  
end

imshow(J);
imwrite(J, '.\resultadoGeo.png', 'png');
